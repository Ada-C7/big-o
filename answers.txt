Snippet 1 - Big O:

def largest?(array, value)
  array.each do |item|
    return false if item > value
  end
  return true
end

ANSWER: My first thought was linear, because if you increase the array length then it will increase the time it takes to iterate through the each loop. But the return statement makes me think it's actually constant, because it will exit the loop if the condition is met (by returning), and it's not necessarily going through the whole thing? But maybe that's not constant because I don't know how many iterations it will take for the false condition to be met?

Snippet 2 - Big O:

def info_dump(customers)
  puts "Customer Names: "
  customers.each do |customer|
    puts "#{customer[:name]}"
  end
  puts "Customer Locations: "
  customers.each do |customer|
    puts "#{customer[:country]}"
  end
end

ANSWER: 2n, or linear. It will take however long it takes to to through the customers hash twice. If the hash has more key/value pairs it will take longer.

Snippet 3 - Big O:

def first_element_is_red?(array)
  array[0] == 'red' ? true : false
end

ANSWER: Constant, because it only looks at one element in the array.


Snippet 4 - Big O:

def duplicates?(array)
  array.each_with_index do |item1, index1|
    array.each_with_index do |item2, index2|
      next if index1 == index2
      return true if item1 == item2
    end
  end
  false
end

ANSWER: Exponential, because it iterates through the same array twice, nested, so it's array * array. Even though it exits early (potentially) by finding an element that is the same as another element, it may not find that until the end (worst case scenario) of the array, so it's exponential.

Snippet 5 - Big O:

words = [chocolate, coconut, rainbow]
endings = [cookie, pie, waffle]

words.each do |word|
  endings.each do |ending|
    puts word + ending
  end
end

ANSWER: Also exponential, because you have two nested loops. Even though you know how long the arrays currently are. The processing time would grow exponentially if either or both arrays grew in length.

Snippet 6 - Big O:

numbers = # some array (you don't know contents)

def print_array(array)
    array.each {|num| puts num}
end

ANSWER: Linear, because the longer the array, the longer the time it will take to process, but in a straight line on a graph sort of way.

Snippet 7 - Big O:

# this is insertion sort
(2...num.length).each do |j|
    key = num[j]
    i = j - 1
    while i > 0 and num[i] > key
        num[i+1] = num[i]
        i = i - 1
    end
    num[i+1] = key
end

ANSWER: I think this is log(n) but I'm not sure. Binary tree is logarithmic and it has a while loop. This has a while loop inside an each loop, so my instinct is to combine them. (Welp, I looked it up and it's n log n, so I wasn't totally wrong?)

Snippet 8 - Big O:

# this is selection sort
n.times do |i|
  index_min = i
  (i + 1).upto(n-1) do |j|
    index_min = j if a[j] < a[index_min]
  end
  a[i], a[index_min] = a[index_min], a[i] if index_min != i
end

ANSWER: Uh, I think this is exponential, because it is two nested loops, but let's see what old Google says. I think that's right.
